{
  "scopeName": "source.wren",
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#keywords" },
    { "include": "#numbers" },
    { "include": "#functions" },
    { "include": "#classes" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.wren",
          "match": "//.*$"
        },
        {
          "name": "comment.block.wren",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.wren",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.wren",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.wren",
          "match": "\\b(if|else|while|for|in|return|break|continue|import)\\b"
        },
        {
          "name": "keyword.other.wren",
          "match": "\\b(class|var|static|construct|foreign|is|this|super)\\b"
        },
        {
          "name": "constant.language.wren",
          "match": "\\b(true|false|null)\\b"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.wren",
          "match": "\\b[0-9]+(\\.[0-9]+)?\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.wren",
          "match": "\\b([a-z][a-zA-Z0-9_]*)\\s*(?=\\()"
        }
      ]
    },
    "classes": {
      "patterns": [
        {
          "name": "entity.name.type.class.wren",
          "match": "\\b([A-Z][a-zA-Z0-9_]*)\\b"
        }
      ]
    }
  }
}
