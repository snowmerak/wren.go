// Code generated by wrengen. DO NOT EDIT.

package main

import wrengo "github.com/snowmerak/gwen"

func init() {
	RegisterWrenBindings()
}

func RegisterWrenBindings() {
	// Math.add
	wrengo.RegisterForeignMethod("main", "Math", false, "add(_,_)", func(vm *wrengo.WrenVM) {
		a := int32(vm.GetSlotDouble(1))
		b := int32(vm.GetSlotDouble(2))
		receiver := &Math{}
		result := receiver.Add(a, b)
		vm.SetSlotDouble(0, float64(result))
	})

	// Math.multiply
	wrengo.RegisterForeignMethod("main", "Math", true, "multiply(_,_)", func(vm *wrengo.WrenVM) {
		a := float64(vm.GetSlotDouble(1))
		b := float64(vm.GetSlotDouble(2))
		receiver := &Math{}
		result := receiver.Multiply(a, b)
		vm.SetSlotDouble(0, float64(result))
	})

	// Math.divide
	wrengo.RegisterForeignMethod("main", "Math", false, "divide(_,_)", func(vm *wrengo.WrenVM) {
		a := float64(vm.GetSlotDouble(1))
		b := float64(vm.GetSlotDouble(2))
		receiver := &Math{}
		result, result1 := receiver.Divide(a, b)
		if result1 != nil {
			vm.SetSlotString(0, result1.Error())
			vm.AbortFiber(0)
			return
		}
		vm.SetSlotDouble(0, float64(result))
	})

	// StringUtils.concat
	wrengo.RegisterForeignMethod("main", "StringUtils", true, "concat(_,_)", func(vm *wrengo.WrenVM) {
		a := vm.GetSlotString(1)
		b := vm.GetSlotString(2)
		result := StringConcat(a, b)
		vm.SetSlotString(0, result)
	})

	// Utils.greet
	wrengo.RegisterForeignMethod("main", "Utils", true, "greet(_)", func(vm *wrengo.WrenVM) {
		name := vm.GetSlotString(1)
		result := Greet(name)
		vm.SetSlotString(0, result)
	})

	// Calculator.square
	wrengo.RegisterForeignMethod("main", "Calculator", true, "square(_)", func(vm *wrengo.WrenVM) {
		x := float64(vm.GetSlotDouble(1))
		result := Square(x)
		vm.SetSlotDouble(0, float64(result))
	})

	// Calculator.sqrt
	wrengo.RegisterForeignMethod("main", "Calculator", true, "sqrt(_)", func(vm *wrengo.WrenVM) {
		x := float64(vm.GetSlotDouble(1))
		result := Sqrt(x)
		vm.SetSlotDouble(0, float64(result))
	})

	// Calculator.power
	wrengo.RegisterForeignMethod("main", "Calculator", true, "power(_,_)", func(vm *wrengo.WrenVM) {
		base := float64(vm.GetSlotDouble(1))
		exponent := float64(vm.GetSlotDouble(2))
		result := Power(base, exponent)
		vm.SetSlotDouble(0, float64(result))
	})

	// Circle.area
	wrengo.RegisterForeignMethod("geometry", "Circle", true, "area(_)", func(vm *wrengo.WrenVM) {
		radius := float64(vm.GetSlotDouble(1))
		result := CircleArea(radius)
		vm.SetSlotDouble(0, float64(result))
	})

	// Circle.circumference
	wrengo.RegisterForeignMethod("geometry", "Circle", true, "circumference(_)", func(vm *wrengo.WrenVM) {
		radius := float64(vm.GetSlotDouble(1))
		result := CircleCircumference(radius)
		vm.SetSlotDouble(0, float64(result))
	})

	// Rectangle.area
	wrengo.RegisterForeignMethod("geometry", "Rectangle", true, "area(_,_)", func(vm *wrengo.WrenVM) {
		width := float64(vm.GetSlotDouble(1))
		height := float64(vm.GetSlotDouble(2))
		result := RectangleArea(width, height)
		vm.SetSlotDouble(0, float64(result))
	})

	// Rectangle.perimeter
	wrengo.RegisterForeignMethod("geometry", "Rectangle", true, "perimeter(_,_)", func(vm *wrengo.WrenVM) {
		width := float64(vm.GetSlotDouble(1))
		height := float64(vm.GetSlotDouble(2))
		result := RectanglePerimeter(width, height)
		vm.SetSlotDouble(0, float64(result))
	})

}
