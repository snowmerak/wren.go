// Code generated by wrengen. DO NOT EDIT.

package wrengo

func init() {
	RegisterWrenBindings()
}

func RegisterWrenBindings() {
	// Async.await(_)
	RegisterForeignMethod("main", "Async", true, "$1", func(vm *WrenVM) {
		// TODO: Extract vm (*WrenVM) from slot 1
		receiver := &Async{}
		result := receiver.Await(vm)
		if result != nil {
			vm.SetSlotString(0, result.Error())
			vm.AbortFiber(0)
			return
		}
	})

	// Async.isReady(_)
	RegisterForeignMethod("main", "Async", true, "$1", func(vm *WrenVM) {
		// TODO: Extract vm (*WrenVM) from slot 1
		receiver := &Async{}
		result := receiver.IsReady(vm)
		if result != nil {
			vm.SetSlotString(0, result.Error())
			vm.AbortFiber(0)
			return
		}
	})

	// Async.get(_)
	RegisterForeignMethod("main", "Async", true, "$1", func(vm *WrenVM) {
		// TODO: Extract vm (*WrenVM) from slot 1
		receiver := &Async{}
		result := receiver.Get(vm)
		if result != nil {
			vm.SetSlotString(0, result.Error())
			vm.AbortFiber(0)
			return
		}
	})

	// Async.cancel(_)
	RegisterForeignMethod("main", "Async", true, "$1", func(vm *WrenVM) {
		// TODO: Extract vm (*WrenVM) from slot 1
		receiver := &Async{}
		result := receiver.Cancel(vm)
		if result != nil {
			vm.SetSlotString(0, result.Error())
			vm.AbortFiber(0)
			return
		}
	})

	// Async.getState(_)
	RegisterForeignMethod("main", "Async", true, "$1", func(vm *WrenVM) {
		// TODO: Extract vm (*WrenVM) from slot 1
		receiver := &Async{}
		result := receiver.GetState(vm)
		if result != nil {
			vm.SetSlotString(0, result.Error())
			vm.AbortFiber(0)
			return
		}
	})

	// Async.cleanup(_)
	RegisterForeignMethod("main", "Async", true, "$1", func(vm *WrenVM) {
		// TODO: Extract vm (*WrenVM) from slot 1
		receiver := &Async{}
		result := receiver.Cleanup(vm)
		if result != nil {
			vm.SetSlotString(0, result.Error())
			vm.AbortFiber(0)
			return
		}
	})

}
