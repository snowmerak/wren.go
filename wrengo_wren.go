// Code generated by wrengen. DO NOT EDIT.

package wrengo

func init() {
	RegisterWrenBindings()
}

func RegisterWrenBindings() {
	// Async.await(_)
	RegisterForeignMethod("async", "Async", true, "await(_)", func(vm *WrenVM) {
		receiver := &Async{}
		result := receiver.Await(vm)
		if result != nil {
			vm.SetSlotString(0, result.Error())
			vm.AbortFiber(0)
			return
		}
	})

	// Async.isReady(_)
	RegisterForeignMethod("async", "Async", true, "isReady(_)", func(vm *WrenVM) {
		receiver := &Async{}
		result := receiver.IsReady(vm)
		if result != nil {
			vm.SetSlotString(0, result.Error())
			vm.AbortFiber(0)
			return
		}
	})

	// Async.get(_)
	RegisterForeignMethod("async", "Async", true, "get(_)", func(vm *WrenVM) {
		receiver := &Async{}
		result := receiver.Get(vm)
		if result != nil {
			vm.SetSlotString(0, result.Error())
			vm.AbortFiber(0)
			return
		}
	})

	// Async.cancel(_)
	RegisterForeignMethod("async", "Async", true, "cancel(_)", func(vm *WrenVM) {
		receiver := &Async{}
		result := receiver.Cancel(vm)
		if result != nil {
			vm.SetSlotString(0, result.Error())
			vm.AbortFiber(0)
			return
		}
	})

	// Async.getState(_)
	RegisterForeignMethod("async", "Async", true, "getState(_)", func(vm *WrenVM) {
		receiver := &Async{}
		result := receiver.GetState(vm)
		if result != nil {
			vm.SetSlotString(0, result.Error())
			vm.AbortFiber(0)
			return
		}
	})

	// Async.cleanup(_)
	RegisterForeignMethod("async", "Async", true, "cleanup(_)", func(vm *WrenVM) {
		receiver := &Async{}
		result := receiver.Cleanup(vm)
		if result != nil {
			vm.SetSlotString(0, result.Error())
			vm.AbortFiber(0)
			return
		}
	})

}
