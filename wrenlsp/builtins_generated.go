// Code generated by wrenlsp-gen. DO NOT EDIT.

package wrenlsp

// Built-in Wren classes and methods from wren.go builtin modules
var builtinSymbols = []ForeignMethodInfo{
	// Core Wren classes (manually maintained)
	{
		Module:    "core",
		Class:     "System",
		Method:    "print",
		Signature: "print(_)",
		IsStatic:  true,
		Doc:       "Prints the value to stdout.",
	},
	{
		Module:    "core",
		Class:     "System",
		Method:    "write",
		Signature: "write(_)",
		IsStatic:  true,
		Doc:       "Writes the value to stdout without a newline.",
	},
	{
		Module:    "core",
		Class:     "System",
		Method:    "clock",
		Signature: "clock",
		IsStatic:  true,
		Doc:       "Returns the number of seconds since the program started.",
	},
	{
		Module:    "core",
		Class:     "System",
		Method:    "gc",
		Signature: "gc()",
		IsStatic:  true,
		Doc:       "Runs the garbage collector.",
	},

	// Fiber class
	{
		Module:    "core",
		Class:     "Fiber",
		Method:    "new",
		Signature: "new(_)",
		IsStatic:  true,
		Doc:       "Creates a new fiber that executes the given function.",
	},
	{
		Module:    "core",
		Class:     "Fiber",
		Method:    "yield",
		Signature: "yield()",
		IsStatic:  true,
		Doc:       "Yields control from the current fiber.",
	},
	{
		Module:    "core",
		Class:     "Fiber",
		Method:    "call",
		Signature: "call()",
		IsStatic:  false,
		Doc:       "Runs the fiber.",
	},

	// List class
	{
		Module:    "core",
		Class:     "List",
		Method:    "add",
		Signature: "add(_)",
		IsStatic:  false,
		Doc:       "Adds an item to the end of the list.",
	},
	{
		Module:    "core",
		Class:     "List",
		Method:    "clear",
		Signature: "clear()",
		IsStatic:  false,
		Doc:       "Removes all items from the list.",
	},
	{
		Module:    "core",
		Class:     "List",
		Method:    "count",
		Signature: "count",
		IsStatic:  false,
		Doc:       "The number of items in the list.",
	},
	{
		Module:    "core",
		Class:     "List",
		Method:    "insert",
		Signature: "insert(_,_)",
		IsStatic:  false,
		Doc:       "Inserts an item at the given index.",
	},
	{
		Module:    "core",
		Class:     "List",
		Method:    "iterate",
		Signature: "iterate(_)",
		IsStatic:  false,
		Doc:       "Returns the next iterator value.",
	},
	{
		Module:    "core",
		Class:     "List",
		Method:    "iteratorValue",
		Signature: "iteratorValue(_)",
		IsStatic:  false,
		Doc:       "Returns the value at the iterator position.",
	},
	{
		Module:    "core",
		Class:     "List",
		Method:    "removeAt",
		Signature: "removeAt(_)",
		IsStatic:  false,
		Doc:       "Removes the item at the given index.",
	},

	// Map class
	{
		Module:    "core",
		Class:     "Map",
		Method:    "clear",
		Signature: "clear()",
		IsStatic:  false,
		Doc:       "Removes all entries from the map.",
	},
	{
		Module:    "core",
		Class:     "Map",
		Method:    "containsKey",
		Signature: "containsKey(_)",
		IsStatic:  false,
		Doc:       "Returns true if the map contains the given key.",
	},
	{
		Module:    "core",
		Class:     "Map",
		Method:    "count",
		Signature: "count",
		IsStatic:  false,
		Doc:       "The number of entries in the map.",
	},
	{
		Module:    "core",
		Class:     "Map",
		Method:    "iterate",
		Signature: "iterate(_)",
		IsStatic:  false,
		Doc:       "Returns the next iterator value.",
	},
	{
		Module:    "core",
		Class:     "Map",
		Method:    "iteratorValue",
		Signature: "iteratorValue(_)",
		IsStatic:  false,
		Doc:       "Returns the value at the iterator position.",
	},
	{
		Module:    "core",
		Class:     "Map",
		Method:    "keys",
		Signature: "keys",
		IsStatic:  false,
		Doc:       "Returns a list of all keys in the map.",
	},
	{
		Module:    "core",
		Class:     "Map",
		Method:    "remove",
		Signature: "remove(_)",
		IsStatic:  false,
		Doc:       "Removes the entry with the given key.",
	},
	{
		Module:    "core",
		Class:     "Map",
		Method:    "values",
		Signature: "values",
		IsStatic:  false,
		Doc:       "Returns a list of all values in the map.",
	},

	// String class
	{
		Module:    "core",
		Class:     "String",
		Method:    "contains",
		Signature: "contains(_)",
		IsStatic:  false,
		Doc:       "Returns true if the string contains the given substring.",
	},
	{
		Module:    "core",
		Class:     "String",
		Method:    "count",
		Signature: "count",
		IsStatic:  false,
		Doc:       "The number of characters in the string.",
	},
	{
		Module:    "core",
		Class:     "String",
		Method:    "startsWith",
		Signature: "startsWith(_)",
		IsStatic:  false,
		Doc:       "Returns true if the string starts with the given prefix.",
	},
	{
		Module:    "core",
		Class:     "String",
		Method:    "endsWith",
		Signature: "endsWith(_)",
		IsStatic:  false,
		Doc:       "Returns true if the string ends with the given suffix.",
	},

	// Num class
	{
		Module:    "core",
		Class:     "Num",
		Method:    "abs",
		Signature: "abs",
		IsStatic:  false,
		Doc:       "Returns the absolute value.",
	},
	{
		Module:    "core",
		Class:     "Num",
		Method:    "ceil",
		Signature: "ceil",
		IsStatic:  false,
		Doc:       "Returns the smallest integer >= this number.",
	},
	{
		Module:    "core",
		Class:     "Num",
		Method:    "floor",
		Signature: "floor",
		IsStatic:  false,
		Doc:       "Returns the largest integer <= this number.",
	},
	{
		Module:    "core",
		Class:     "Num",
		Method:    "isNan",
		Signature: "isNan",
		IsStatic:  false,
		Doc:       "Returns true if this is NaN.",
	},
	{
		Module:    "core",
		Class:     "Num",
		Method:    "toString",
		Signature: "toString",
		IsStatic:  false,
		Doc:       "Converts the number to a string.",
	},

	// async module (auto-generated)
	{
		Module:    "async",
		Class:     "Async",
		Method:    "delay",
		Signature: "delay(_)",
		IsStatic:  true,
		Doc:       "delay method from async.Async class.",
	},
	{
		Module:    "async",
		Class:     "Async",
		Method:    "sleep",
		Signature: "sleep(_)",
		IsStatic:  true,
		Doc:       "sleep method from async.Async class.",
	},
	{
		Module:    "async",
		Class:     "Async",
		Method:    "timer",
		Signature: "timer(_,_)",
		IsStatic:  true,
		Doc:       "timer method from async.Async class.",
	},

	// math module (auto-generated)
	{
		Module:    "math",
		Class:     "Math",
		Method:    "abs",
		Signature: "abs(_)",
		IsStatic:  true,
		Doc:       "abs method from math.Math class.",
	},
	{
		Module:    "math",
		Class:     "Math",
		Method:    "cos",
		Signature: "cos(_)",
		IsStatic:  true,
		Doc:       "cos method from math.Math class.",
	},
	{
		Module:    "math",
		Class:     "Math",
		Method:    "max",
		Signature: "max(_,_)",
		IsStatic:  true,
		Doc:       "max method from math.Math class.",
	},
	{
		Module:    "math",
		Class:     "Math",
		Method:    "min",
		Signature: "min(_,_)",
		IsStatic:  true,
		Doc:       "min method from math.Math class.",
	},
	{
		Module:    "math",
		Class:     "Math",
		Method:    "pi",
		Signature: "pi",
		IsStatic:  true,
		Doc:       "pi method from math.Math class.",
	},
	{
		Module:    "math",
		Class:     "Math",
		Method:    "pow",
		Signature: "pow(_,_)",
		IsStatic:  true,
		Doc:       "pow method from math.Math class.",
	},
	{
		Module:    "math",
		Class:     "Math",
		Method:    "sin",
		Signature: "sin(_)",
		IsStatic:  true,
		Doc:       "sin method from math.Math class.",
	},
	{
		Module:    "math",
		Class:     "Math",
		Method:    "sqrt",
		Signature: "sqrt(_)",
		IsStatic:  true,
		Doc:       "sqrt method from math.Math class.",
	},

	// strconv module (auto-generated)
	{
		Module:    "strconv",
		Class:     "StrConv",
		Method:    "atoi",
		Signature: "atoi(_)",
		IsStatic:  true,
		Doc:       "atoi method from strconv.StrConv class.",
	},
	{
		Module:    "strconv",
		Class:     "StrConv",
		Method:    "formatBool",
		Signature: "formatBool(_)",
		IsStatic:  true,
		Doc:       "formatBool method from strconv.StrConv class.",
	},
	{
		Module:    "strconv",
		Class:     "StrConv",
		Method:    "formatFloat",
		Signature: "formatFloat(_,_)",
		IsStatic:  true,
		Doc:       "formatFloat method from strconv.StrConv class.",
	},
	{
		Module:    "strconv",
		Class:     "StrConv",
		Method:    "itoa",
		Signature: "itoa(_)",
		IsStatic:  true,
		Doc:       "itoa method from strconv.StrConv class.",
	},
	{
		Module:    "strconv",
		Class:     "StrConv",
		Method:    "parseBool",
		Signature: "parseBool(_)",
		IsStatic:  true,
		Doc:       "parseBool method from strconv.StrConv class.",
	},
	{
		Module:    "strconv",
		Class:     "StrConv",
		Method:    "parseFloat",
		Signature: "parseFloat(_)",
		IsStatic:  true,
		Doc:       "parseFloat method from strconv.StrConv class.",
	},

	// strings module (auto-generated)
	{
		Module:    "strings",
		Class:     "Strings",
		Method:    "contains",
		Signature: "contains(_,_)",
		IsStatic:  true,
		Doc:       "contains method from strings.Strings class.",
	},
	{
		Module:    "strings",
		Class:     "Strings",
		Method:    "join",
		Signature: "join(_,_)",
		IsStatic:  true,
		Doc:       "join method from strings.Strings class.",
	},
	{
		Module:    "strings",
		Class:     "Strings",
		Method:    "lower",
		Signature: "lower(_)",
		IsStatic:  true,
		Doc:       "lower method from strings.Strings class.",
	},
	{
		Module:    "strings",
		Class:     "Strings",
		Method:    "split",
		Signature: "split(_,_)",
		IsStatic:  true,
		Doc:       "split method from strings.Strings class.",
	},
	{
		Module:    "strings",
		Class:     "Strings",
		Method:    "trim",
		Signature: "trim(_)",
		IsStatic:  true,
		Doc:       "trim method from strings.Strings class.",
	},
	{
		Module:    "strings",
		Class:     "Strings",
		Method:    "upper",
		Signature: "upper(_)",
		IsStatic:  true,
		Doc:       "upper method from strings.Strings class.",
	},
}
