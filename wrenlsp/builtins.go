package wrenlsp

// Built-in Wren classes and methods
var builtinSymbols = []ForeignMethodInfo{
	// System class
	{
		Module:    "core",
		Class:     "System",
		Method:    "print",
		Signature: "print(_)",
		IsStatic:  true,
		Doc:       "Prints the value to stdout.",
	},
	{
		Module:    "core",
		Class:     "System",
		Method:    "write",
		Signature: "write(_)",
		IsStatic:  true,
		Doc:       "Writes the value to stdout without a newline.",
	},
	{
		Module:    "core",
		Class:     "System",
		Method:    "clock",
		Signature: "clock",
		IsStatic:  true,
		Doc:       "Returns the number of seconds since the program started.",
	},
	{
		Module:    "core",
		Class:     "System",
		Method:    "gc",
		Signature: "gc()",
		IsStatic:  true,
		Doc:       "Runs the garbage collector.",
	},

	// Fiber class
	{
		Module:    "core",
		Class:     "Fiber",
		Method:    "new",
		Signature: "new(_)",
		IsStatic:  true,
		Doc:       "Creates a new fiber that executes the given function.",
	},
	{
		Module:    "core",
		Class:     "Fiber",
		Method:    "yield",
		Signature: "yield()",
		IsStatic:  true,
		Doc:       "Yields control from the current fiber.",
	},
	{
		Module:    "core",
		Class:     "Fiber",
		Method:    "call",
		Signature: "call()",
		IsStatic:  false,
		Doc:       "Runs the fiber.",
	},

	// List class
	{
		Module:    "core",
		Class:     "List",
		Method:    "add",
		Signature: "add(_)",
		IsStatic:  false,
		Doc:       "Adds an item to the end of the list.",
	},
	{
		Module:    "core",
		Class:     "List",
		Method:    "clear",
		Signature: "clear()",
		IsStatic:  false,
		Doc:       "Removes all items from the list.",
	},
	{
		Module:    "core",
		Class:     "List",
		Method:    "count",
		Signature: "count",
		IsStatic:  false,
		Doc:       "The number of items in the list.",
	},
	{
		Module:    "core",
		Class:     "List",
		Method:    "insert",
		Signature: "insert(_,_)",
		IsStatic:  false,
		Doc:       "Inserts an item at the given index.",
	},
	{
		Module:    "core",
		Class:     "List",
		Method:    "iterate",
		Signature: "iterate(_)",
		IsStatic:  false,
		Doc:       "Returns the next iterator value.",
	},
	{
		Module:    "core",
		Class:     "List",
		Method:    "iteratorValue",
		Signature: "iteratorValue(_)",
		IsStatic:  false,
		Doc:       "Returns the value at the iterator position.",
	},
	{
		Module:    "core",
		Class:     "List",
		Method:    "removeAt",
		Signature: "removeAt(_)",
		IsStatic:  false,
		Doc:       "Removes the item at the given index.",
	},

	// Map class
	{
		Module:    "core",
		Class:     "Map",
		Method:    "clear",
		Signature: "clear()",
		IsStatic:  false,
		Doc:       "Removes all entries from the map.",
	},
	{
		Module:    "core",
		Class:     "Map",
		Method:    "containsKey",
		Signature: "containsKey(_)",
		IsStatic:  false,
		Doc:       "Returns true if the map contains the given key.",
	},
	{
		Module:    "core",
		Class:     "Map",
		Method:    "count",
		Signature: "count",
		IsStatic:  false,
		Doc:       "The number of entries in the map.",
	},
	{
		Module:    "core",
		Class:     "Map",
		Method:    "iterate",
		Signature: "iterate(_)",
		IsStatic:  false,
		Doc:       "Returns the next iterator value.",
	},
	{
		Module:    "core",
		Class:     "Map",
		Method:    "iteratorValue",
		Signature: "iteratorValue(_)",
		IsStatic:  false,
		Doc:       "Returns the value at the iterator position.",
	},
	{
		Module:    "core",
		Class:     "Map",
		Method:    "keys",
		Signature: "keys",
		IsStatic:  false,
		Doc:       "Returns a list of all keys in the map.",
	},
	{
		Module:    "core",
		Class:     "Map",
		Method:    "remove",
		Signature: "remove(_)",
		IsStatic:  false,
		Doc:       "Removes the entry with the given key.",
	},
	{
		Module:    "core",
		Class:     "Map",
		Method:    "values",
		Signature: "values",
		IsStatic:  false,
		Doc:       "Returns a list of all values in the map.",
	},

	// String class
	{
		Module:    "core",
		Class:     "String",
		Method:    "contains",
		Signature: "contains(_)",
		IsStatic:  false,
		Doc:       "Returns true if the string contains the given substring.",
	},
	{
		Module:    "core",
		Class:     "String",
		Method:    "count",
		Signature: "count",
		IsStatic:  false,
		Doc:       "The number of characters in the string.",
	},
	{
		Module:    "core",
		Class:     "String",
		Method:    "startsWith",
		Signature: "startsWith(_)",
		IsStatic:  false,
		Doc:       "Returns true if the string starts with the given prefix.",
	},
	{
		Module:    "core",
		Class:     "String",
		Method:    "endsWith",
		Signature: "endsWith(_)",
		IsStatic:  false,
		Doc:       "Returns true if the string ends with the given suffix.",
	},

	// Num class
	{
		Module:    "core",
		Class:     "Num",
		Method:    "abs",
		Signature: "abs",
		IsStatic:  false,
		Doc:       "Returns the absolute value.",
	},
	{
		Module:    "core",
		Class:     "Num",
		Method:    "ceil",
		Signature: "ceil",
		IsStatic:  false,
		Doc:       "Returns the smallest integer >= this number.",
	},
	{
		Module:    "core",
		Class:     "Num",
		Method:    "floor",
		Signature: "floor",
		IsStatic:  false,
		Doc:       "Returns the largest integer <= this number.",
	},
	{
		Module:    "core",
		Class:     "Num",
		Method:    "isNan",
		Signature: "isNan",
		IsStatic:  false,
		Doc:       "Returns true if this is NaN.",
	},
	{
		Module:    "core",
		Class:     "Num",
		Method:    "toString",
		Signature: "toString",
		IsStatic:  false,
		Doc:       "Converts the number to a string.",
	},

	// Async classes (from wren.go)
	{
		Module:    "async",
		Class:     "Future",
		Method:    "new",
		Signature: "new(_)",
		IsStatic:  true,
		Doc:       "Creates a new Future that will be resolved with the result of the given fiber.",
	},
	{
		Module:    "async",
		Class:     "Future",
		Method:    "then",
		Signature: "then(_)",
		IsStatic:  false,
		Doc:       "Chains a callback to be called when the future completes.",
	},
	{
		Module:    "async",
		Class:     "Future",
		Method:    "wait",
		Signature: "wait()",
		IsStatic:  false,
		Doc:       "Blocks until the future completes and returns the result.",
	},
	{
		Module:    "async",
		Class:     "AsyncManager",
		Method:    "new",
		Signature: "new()",
		IsStatic:  true,
		Doc:       "Creates a new AsyncManager for managing multiple async operations.",
	},
	{
		Module:    "async",
		Class:     "AsyncManager",
		Method:    "submit",
		Signature: "submit(_)",
		IsStatic:  false,
		Doc:       "Submits a fiber to be executed asynchronously.",
	},
	{
		Module:    "async",
		Class:     "AsyncManager",
		Method:    "wait",
		Signature: "wait()",
		IsStatic:  false,
		Doc:       "Waits for all submitted tasks to complete.",
	},
	{
		Module:    "async",
		Class:     "AsyncManager",
		Method:    "shutdown",
		Signature: "shutdown()",
		IsStatic:  false,
		Doc:       "Shuts down the async manager.",
	},
}
